<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.sap.gamification</groupId>
	<artifactId>helpdesk</artifactId>
	<packaging>war</packaging>
	<version>1.63.0</version>

	<properties>
		<ldi.jacoco.skip />
		<sonar.javascript.eslint.reportPath>target/eslint/eslint.xml</sonar.javascript.eslint.reportPath>
	</properties>
	<dependencies>
		<!-- The SAP Cloud Platform Java Web API -->
		<dependency>
			<groupId>com.sap.cloud</groupId>
			<artifactId>neo-java-web-api</artifactId>
			<version>1.167.13</version>
			<scope>provided</scope>
		</dependency>
		<!-- used to handle JSON transformation in servlets -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.2.2</version>
		</dependency>
	</dependencies>

	<build>
		<!-- Controlling web context, e.g. to https://hostname/helpdesk instead 
			of https://hostname/helpdesk-0.8.0. We do not implement this via filename, 
			e.g. "helpdesk.war", with the <finalName> tag but define META-INF/MANIFEST.MF 
			-> Web-ContextPath: helpdesk instead. -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<archive>
						<manifestEntries>
							<Version>${project.version}</Version>
							<Web-ContextPath>helpdesk</Web-ContextPath>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.13</version>
				<configuration>
					<outputFileFormat>xml</outputFileFormat>
					<consoleOutput>false</consoleOutput>
					<enableRSS>false</enableRSS>
					<linkXRef>false</linkXRef>
					<configLocation>checkstyle-config.xml</configLocation>
					<sourceDirectory>${basedir}/src</sourceDirectory>
					<encoding>UTF-8</encoding>
					<failOnViolation>true</failOnViolation>
					<violationSeverity>error</violationSeverity>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>eslint</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.sap.eslint</groupId>
						<artifactId>eslint-maven-plugin</artifactId>
						<version>0.1.16</version>
						<executions>
							<execution>
								<id>static-code-check</id>
								<goals>
									<goal>eslint</goal>
								</goals>
								<phase>verify</phase>
								<configuration>
									<failOnError>false</failOnError>
									<configFile>../.eslintrc.json</configFile>
									<useEsLintRc>false</useEsLintRc>
									<version>3.0.1</version>
									<ignorePath>../.eslintignore</ignorePath>
									<includes>
										<include>src/main/webapp/**</include>
									</includes>
									<formatters>
										<formatter
											implementation="com.sap.eslint.java.formatters.JSLintSonarFormatter">
											<outputFile>${sonar.javascript.eslint.reportPath}</outputFile>
										</formatter>
										<formatter
											implementation="com.sap.eslint.java.formatters.CheckstyleFormatter">
											<outputFile>target/eslint/checkstyle.xml</outputFile>
										</formatter>
									</formatters>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>vulas</id>
			<activation>
				<property>
					<name>vulas</name>
				</property>
			</activation>
			<properties>
				<vulas.version>3.0.12</vulas.version>
				<vulas.shared.backend.serviceUrl>http://vulas.mo.sap.corp:8080/backend</vulas.shared.backend.serviceUrl>
				<!-- Space: CP_Neo_Cloud_Runtime -->
				<vulas.core.space.token>A1B1CA84A5C73162A71E953A2E5F4CB0</vulas.core.space.token>
				<!-- CP_Neo_Gamification -->
				<!-- <vulas.core.space.token>A575526975920B7840C37968CF6C2F65</vulas.core.space.token> -->
				<vulas.core.appContext.group>${project.groupId}</vulas.core.appContext.group>
				<vulas.core.appContext.artifact>${project.artifactId}</vulas.core.appContext.artifact>
				<vulas.core.appContext.version>${project.version}</vulas.core.appContext.version>
			</properties>
			<build>
				<plugins>
					<!-- Copies Vulas JARs to ${project.build.directory}/vulas/lib and incl, 
						which is needed for the instrumentation of JUnit tests. -->
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-vulas</id>
								<phase>generate-test-resources</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>com.sap.research.security.vulas</groupId>
											<artifactId>lang-java</artifactId>
											<version>${vulas.version}</version>
											<type>jar</type>
											<classifier>jar-with-dependencies</classifier>
											<outputDirectory>${project.build.directory}/vulas/lib</outputDirectory>
											<destFileName>vulas-core-latest-jar-with-dependencies.jar</destFileName>
										</artifactItem>
										<artifactItem>
											<groupId>com.sap.research.security.vulas</groupId>
											<artifactId>lang-java</artifactId>
											<version>${vulas.version}</version>
											<type>jar</type>
											<classifier>jar-with-dependencies</classifier>
											<outputDirectory>${project.build.directory}/vulas/include</outputDirectory>
											<destFileName>vulas-core-latest-jar-with-dependencies.jar</destFileName>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Registers the Vulas agent at JVM startup (and specifies a couple 
						of configuration settings) -->
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!-- If set to 0, no separate JVM process will be spawned, i.e., one 
								can use mvnDebug and JVM params can be added to the Maven (rather than putting 
								them in the Surefire plugin configuration) (default: 1) -->
							<forkCount>1</forkCount>

							<!-- Kill the forked test process after a certain number of seconds. 
								If set to 0, wait forever for the process, never timing out. This allows 
								Vulas to (hopefully) upload all info in its shutdown hook. More info: https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html, 
								https://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html -->
							<forkedProcessTimeoutInSeconds>0</forkedProcessTimeoutInSeconds>

							<!-- Available as of 2.20 (or so), default is 30 -->
							<forkedProcessExitTimeoutInSeconds>300</forkedProcessExitTimeoutInSeconds>

							<!-- Note: System properties cannot be set at the Maven command line, 
								they are not passed on to the JVM spawned by Surefire (if any, see parameter 
								forkCount) -->
							<argLine>
								-javaagent:"${project.build.directory}/vulas/lib/vulas-core-latest-jar-with-dependencies.jar"
								-Dvulas.shared.backend.serviceUrl=${vulas.shared.backend.serviceUrl}
								-Dvulas.shared.tmpDir=${project.build.directory}/vulas/tmp
								-Dvulas.core.backendConnection=READ_ONLY
								-Dvulas.core.uploadDir=${project.build.directory}/vulas/upload
								-Dvulas.core.monitor.periodicUpload.enabled=false
								-Dvulas.core.appContext.group=${vulas.core.appContext.group}
								-Dvulas.core.appContext.artifact=${vulas.core.appContext.artifact}
								-Dvulas.core.appContext.version=${vulas.core.appContext.version}
								-Dvulas.core.instr.writeCode=false
								-Dvulas.core.instr.maxStacktraces=10
								-Dvulas.core.space.token=${vulas.core.space.token}
								-Dvulas.core.instr.instrumentorsChoosen=com.sap.psr.vulas.monitor.trace.SingleTraceInstrumentor
								-noverify

								<!-- Uncomment to write the heap to disk in case of memory issues -->
								<!-- -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${project.build.directory}/vulas/tmp -->

								<!-- Uncomment to debug the test execution or the Vulas plugin -->
								<!-- -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -->

							</argLine>
							<!-- Exclude problematic tests -->
							<excludes>
								<exclude>**/doesnotexist.java</exclude>
							</excludes>
						</configuration>
					</plugin>

					<plugin>
						<groupId>com.sap.research.security.vulas</groupId>
						<artifactId>plugin-maven</artifactId>
						<version>${vulas.version}</version>
						<configuration>
							<layeredConfiguration>
								<vulas.shared.backend.serviceUrl>${vulas.shared.backend.serviceUrl}</vulas.shared.backend.serviceUrl>
								<vulas.core.space.token>${vulas.core.space.token}</vulas.core.space.token>

								<vulas.core.appContext.group>${vulas.core.appContext.group}</vulas.core.appContext.group>
								<vulas.core.appContext.artifact>${vulas.core.appContext.artifact}</vulas.core.appContext.artifact>
								<vulas.core.appContext.version>${vulas.core.appContext.version}</vulas.core.appContext.version>

								<vulas.shared.tmpDir>${project.build.directory}/vulas/tmp</vulas.shared.tmpDir>
								<vulas.core.uploadDir>${project.build.directory}/vulas/upload</vulas.core.uploadDir>
								<vulas.core.app.sourceDir>${project.build.directory}/classes,${project.basedir}/src/main/java,${project.basedir}/src/main/python</vulas.core.app.sourceDir>

								<!-- vulas:instr : Instruments JAR/WAR files found in source dir, 
									and writes to target dir. Files in include dir are put into /WEB-INF/lib 
									of output WARs. Files in lib dir are part of the class path when instrumenting. -->
								<vulas.core.instr.sourceDir>${project.build.directory}</vulas.core.instr.sourceDir>
								<vulas.core.instr.targetDir>${project.build.directory}/vulas/target</vulas.core.instr.targetDir>
								<vulas.core.instr.includeDir>${project.build.directory}/vulas/include</vulas.core.instr.includeDir>
								<vulas.core.instr.libDir>${project.build.directory}/vulas/lib</vulas.core.instr.libDir>
								<vulas.core.instr.writeCode>false</vulas.core.instr.writeCode>
								<vulas.core.instr.searchRecursive>false</vulas.core.instr.searchRecursive>

								<!-- vulas:a2c/t2c : Performs static call graph analysis -->
								<vulas.reach.wala.callgraph.reflection>NO_FLOW_TO_CASTS_NO_METHOD_INVOKE</vulas.reach.wala.callgraph.reflection>
								<vulas.reach.timeout>60</vulas.reach.timeout>

								<!-- vulas:report -->
								<vulas.report.exceptionExcludeBugs></vulas.report.exceptionExcludeBugs>
								<vulas.report.reportDir>${project.build.directory}/vulas/report</vulas.report.reportDir>
								<vulas.report.sap.scv>01200615320200020308</vulas.report.sap.scv>
							</layeredConfiguration>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
